{"version":3,"sources":["serviceWorker.js","Resource.js","ResourceEvent.js","ProcessResource.js","helper.js","Graphing.js","ResourceManagementTable.js","ResourceEventFile.js","ResourceManager.js","index.js"],"names":["Boolean","window","location","hostname","match","Resource","props","react_default","a","createElement","name","ResourceList","resourceListItems","resources","map","resource","key","id","_","require","ResourceEventList","resourceEventArray","events","length","List_default","className","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_loop","event","value","eventIndex","findIndex","currentEvent","eventCounter","push","ListItem_default","button","onClick","e","clickHandler","selected","process_id","operation","resource_id","_iterator","Symbol","iterator","next","done","err","return","Process","ProcessCell","relationship","res","proc","owner","waiting","includes","getRelationshipText","process","color","toLowerCase","Button_default","variant","ProcessList","processListItems","processes","GraphSpace","_React$Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clear","canvas","document","getElementById","getContext","clearRect","width","height","state","count","canvas_height","canvas_width","title","title_row","title_col","text_padding_top","process_height","process_width","process_row","resource_height","resource_width","resource_row","inherits","createClass","ctx","numProcesses","numResources","font","fillStyle","textAlign","strokeStyle","fillText","processWidth","parseInt","x","startCol","textCol","textRow","rect","stroke","resourceWidth","startProcessCol","startResourceCol","beginPath","moveTo","lineTo","i","React","Component","ResourceManagementTable","processOnClick","tableHeaderRow","TableCell_default","tableBody","rowData","TableRow_default","Table_default","TableHead_default","TableBody_default","ResourceEventFile","handleSubmit","fileChangeHandler","bind","assertThisInitialized","fileInput","createRef","onChange","type","ref","ResourceManager","nextEvent","preventDefault","resource_event_counter","resource_events","resource_history","goToEventNumber","setState","resourceEvent","requestResource","console","log","releaseResource","saveResourceManagerState","prevEvent","cloneDeep","resourceUpdate","event_number","event_history","file","target","files","reader","FileReader","onload","result","lines","split","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","line","processArray","resourceArray","regexResult","regexProcess","regexResource","event_list","readAsText","getNextProcessId","process_id_retval","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","addProcess","process_name","removeProcess","remove","checkForDeadlock","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","cycleDetector","observed_list","end_node","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","resource_i","observed","getResourceById","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","handleRequestClick","event_handle","resource_index","nextOwner","shift","resourceList","processList","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","Grid_default","container","direction","spacing","item","xs","xm","xl","Paper_default","ResourceEventFile_ResourceEventFile","Divider_default","disabled","Graphing_GraphSpace","ReactDOM","render","ResourceManager_ResourceManager","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9f91a97.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport './index.css';\n\nexport function Resource(props) {\n    return <div>Resource {props.name}</div>;\n}\n\nexport function ResourceList(props) {\n    const resources = props.resources;\n\n    const resourceListItems = resources.map((resource) =>\n                                            <li key={resource.props.id}>{resource}</li>\n                                           );\n    return (\n            <ul>{resourceListItems}</ul>\n    );\n}\n\nexport default Resource;\n","import React from 'react';\n\n// Material theming\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\n\n// Include lodash library\nvar _ = require('lodash');\n\nexport function ResourceEvent(props) {\n    return <p>{props.process_id} {props.operation} {props.resource_id}</p>\n}\n\nexport function ResourceEventList(props) {\n    let resourceEventArray = [];\n\n    if(props.events.length === 0) {\n        return (\n            <List className=\"instruction-list\">\n            </List>\n        );\n    }\n\n    for(let event of props.events) {\n        const eventIndex = _.findIndex(props.events, event);\n        let currentEvent = (eventIndex === props.eventCounter);\n\n        resourceEventArray.push(\n                <ListItem button\n                 className={\"event-item\"}\n                 onClick={(e) => props.clickHandler(eventIndex)}\n                 selected={currentEvent}>\n                  {eventIndex}) {event.process_id} {event.operation} {event.resource_id}\n               </ListItem>);\n    }\n\n    return (\n            <List className=\"instruction-list\">\n              {resourceEventArray}\n            </List>\n    );\n}\n\n\n\nexport default ResourceEvent;\n","import React from 'react';\nimport './index.css';\n\n// Material component\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\n// My helper functions\nimport {getRelationshipText} from './helper.js';\n\nexport function Process(props) {\n    return <div>Process {props.name}</div>;\n}\n\nexport function ProcessCell(props) {\n\n    const relationship = getRelationshipText(props.resource, props.process);\n\n    let color = \"default\";\n\n    if(relationship.toLowerCase() === \"owner\") {\n        color = \"primary\";\n    }\n\n    else if(relationship.toLowerCase() === \"waiting\") {\n        color = \"secondary\";\n    }\n\n    return (\n        <td>\n            <Button variant=\"outlined\" color={color} className=\"resource-acquire-button\" onClick={(e) => props.onClick(props.process.props.id, props.resource.props.id, e)}>\n              {relationship}\n            </Button>\n        </td>\n    );\n}\n\nexport function ProcessList(props) {\n    const processes = props.processes;\n\n    const processListItems = processes.map((process) =>\n                                           <li key={process.props.id}>{process}</li>\n                                          );\n    return (\n            <ul>{processListItems}</ul>\n    );\n}\n\nexport default Process;\n\n","import React from 'react';\n\nexport function getRelationshipText(res, proc) {\n    const owner = res.props.owner;\n    const waiting = res.props.waiting;\n\n    if(proc.props.id === owner) {\n        return \"Owner\";\n    }\n\n    else if(waiting.includes(proc.props.id)) {\n        return \"Waiting\";\n    }\n\n    else {\n        return \"Request\";\n    }\n}\n\nexport function textToJsxList(text) {\n        const textArray = text.split(\"\\n\");\n\n        let jsxArray = [];\n\n        for(let line of textArray) {\n            jsxArray.push(<li>{line}</li>);\n        }\n\n        return (\n                <ul>\n                  {jsxArray}\n                </ul>\n        );\n    }\n\n","import React from 'react';\n\nexport class GraphSpace extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 1,\n        };\n\n        // Canvas dimensions\n        this.canvas_height = 405;\n        this.canvas_width = 800;\n\n        // Title dimensions\n        this.title = \"Resource Management Graph\";\n        this.title_row = 40;\n        this.title_col = this.canvas_width / 2;\n\n        // All text\n        this.text_padding_top = 8;\n\n        // Process dimensions\n        this.process_height  = 30; // px\n        this.process_width   = 50; // px\n        this.process_row     = 300; // px\n\n        // Resource dimensions\n        this.resource_height = 30; // px\n        this.resource_width  = 50; // px\n        this.resource_row    = 100; // px\n    }\n\n    render() {\n        // Get canvas by id\n        const canvas = document.getElementById(\"graph-space\");\n\n        let ctx = null;\n\n        // If canvas is found, retrieve the context\n        if(canvas !== null) {\n            ctx = canvas.getContext(\"2d\");\n        }\n\n        // If canvas is not found, just return immediately\n        else {\n            return <div></div>;\n        }\n\n        // Set the height of the canvas\n        // NOTE: THESE TWO LINES ARE IMPORTANT!!!\n        // Without these two lines, double drawing (or failure to clear?)\n        // of lines occasionally occurs which does not get redrawn for the\n        // remainder of the lifetime of the application...\n        canvas.width = this.canvas_width;\n        canvas.height = this.canvas_height;\n\n        // Clear the screen\n        this.clear();\n\n        // Draw updated screen\n        const numProcesses = this.props.processes.length;\n        const numResources = this.props.resources.length;\n\n        // Print Title\n        ctx.font = \"30px Consolas\";\n        ctx.fillStyle = \"black\";\n        ctx.textAlign=\"center\";\n        ctx.strokeStyle=\"black\";\n\n        ctx.fillText(this.title, this.title_col, this.title_row);\n\n        ctx.font = \"16px Consolas\";\n\n        // Draw the processes\n        const processWidth = parseInt(canvas.width / numProcesses);\n\n        for(let x=0; x<numProcesses; x++) {\n            const startCol = x * processWidth + (0.5 * (processWidth - this.process_width));\n            const textCol  = x * processWidth + (0.5 * processWidth);\n            const textRow  = this.process_row + (0.5 * this.process_height) + this.text_padding_top;\n\n            // Draw process rectangle\n            ctx.rect(startCol, this.process_row, this.process_width, this.process_height);\n            ctx.stroke();\n\n            ctx.fillText(\"p\"+x, textCol, textRow);\n        }\n\n        // Draw the resources\n        const resourceWidth = parseInt(canvas.width / numResources);\n\n        for(let x=0; x<numResources; x++) {\n            const startCol = x * resourceWidth + (0.5 * (resourceWidth - this.resource_width));\n            const textCol  = x * resourceWidth + (0.5 * resourceWidth);\n            const textRow  = this.resource_row + (0.5 * this.resource_height) + this.text_padding_top;\n\n            // Draw resource rectangle\n            ctx.rect(startCol, this.resource_row, this.resource_width, this.resource_height);\n            ctx.stroke();\n\n            ctx.fillText(\"r\"+x, textCol, textRow);\n        }\n\n        // Draw the resource requests and waiting relationships\n        const startProcessCol  = 0.5 * processWidth;\n        const startResourceCol = 0.5 * resourceWidth;\n\n        for(let x=0; x<numResources; x++) {\n\n            const owner = this.props.resources[x].owner;\n            const waiting = this.props.resources[x].waiting;\n\n            if(owner === null) {\n                continue;\n            }\n\n            // Draw owner relationship\n            ctx.beginPath();\n            ctx.strokeStyle=\"green\";\n            ctx.moveTo(owner * processWidth + startProcessCol, this.process_row);\n            ctx.lineTo(x * resourceWidth + startResourceCol, this.resource_row + this.resource_height);\n            ctx.stroke(); // Draw it\n\n            // Draw any waiting processes\n            if(waiting.length > 0) {\n                // Print waiting lines\n                for(let i of waiting) {\n                    ctx.beginPath();\n                    ctx.strokeStyle=\"red\";\n                    ctx.moveTo(i * processWidth + startProcessCol, this.process_row);\n                    ctx.lineTo(x * resourceWidth + startResourceCol, this.resource_row + this.resource_height);\n                    ctx.stroke(); // Draw it\n                }\n            }\n        }\n\n\n        return <div></div>;\n    }\n\n    clear = () => {\n        // Get canvas by id\n        const canvas = document.getElementById(\"graph-space\");\n\n        let ctx = null;\n\n        if(canvas !== null) {\n            ctx = canvas.getContext(\"2d\");\n        }\n        else {\n            return false;\n        }\n\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }\n}\n\nexport default GraphSpace\n","import React from 'react';\n\n// Material table theming\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\n// My components\nimport {Resource} from './Resource';\nimport {Process, ProcessCell} from './ProcessResource';\n\nexport function ResourceManagementTable(props) {\n    const processes = props.processes;\n    const resources = props.resources;\n    const processOnClick = props.processOnClick;\n\n    // Blank cell for first space in table\n    const tableHeaderRow = resources.map((resource) =>\n                                         <TableCell key={resource.props.id}><Resource id={resource.props.id} name={resource.props.name} /></TableCell>\n                                        );\n\n    // Fill in the table data for the processes\n    const tableBody = processes.map((process) =>\n                                    {\n                                        let rowData = [];\n\n                                        rowData.push(<TableCell><Process id={process.props.id} name={process.props.name} /></TableCell>);\n\n                                        for(let resource of resources) {\n                                            rowData.push(<ProcessCell process={process} resource={resource} onClick={processOnClick} />);\n                                        }\n\n                                        return <TableRow key={process.props.id}>{rowData}</TableRow>;\n                                    });\n\n    return (\n            <Table>\n              <TableHead>\n                <TableRow><TableCell></TableCell>{tableHeaderRow}</TableRow>\n              </TableHead>\n              <TableBody>\n                {tableBody}\n              </TableBody>\n            </Table>\n    );\n}\n\nexport default ResourceManagementTable\n","import React from 'react';\n\nexport class ResourceEventFile extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleSubmit = props.fileChangeHandler.bind(this);\n        this.fileInput = React.createRef();\n    }\n\n    render() {\n        return (\n                <form onChange={this.handleSubmit}>\n                  <input type=\"file\" ref={this.fileInput} />\n                </form>\n        );\n    }\n}\n\nexport default ResourceEventFile;\n","import React from 'react';\n\n// Material theming\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\n// Material button theming\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\n\n// My components\nimport {Resource, ResourceList} from './Resource';\nimport {ResourceEvent, ResourceEventList} from './ResourceEvent';\nimport {Process, ProcessCell, ProcessList} from './ProcessResource';\nimport {GraphSpace} from './Graphing.js';\nimport {ResourceManagementTable} from './ResourceManagementTable.js';\nimport {ResourceEventFile} from './ResourceEventFile.js';\n\n// My helper functions\nimport {getRelationshipText, textToJsxList} from './helper.js';\n\n// My theming\nimport './MainGui.css';\n\n// If deep clone is needed...\n// https://stackoverflow.com/questions/29537299/react-how-do-i-update-state-item1-on-setstate-with-jsfiddle/46865234#46865234\n// import {cloneDeep} from 'lodash';\nvar _ = require('lodash');\n\nexport class ResourceManager extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            processes: [],\n            resources: [],\n            resource_events: [],\n            resource_history: [],\n            resource_event_counter: -1,\n        };\n    }\n\n    render() {\n        let resourceList = [];\n        let processList = []\n\n        // Create resource JSX\n        for(let resource of this.state.resources) {\n            resourceList.push(<Resource id={resource.id} name={resource.name} owner={resource.owner} waiting={resource.waiting} />);\n        }\n\n        // Create process JSX\n        for(let process of this.state.processes) {\n            processList.push(<Process id={process.id} name={process.name} owner={process.owner} waiting={process.waiting} clickHandler={this.requestResource} />);\n        }\n\n        return (\n                <Grid className=\"full-display\" container direction=\"column\" spacing={12}>\n                  <Grid className=\"main-panel\" container spacing={12}>\n                    <Grid item xs={3} xm={3} xl={3}>\n                      <Paper>\n                        <div className=\"instruction-panel\">\n                          <div className=\"instruction-file-section\">\n                            <ResourceEventFile fileChangeHandler={this.fileChangeHandler}/>\n                          </div>\n                          <Divider />\n                          <div className=\"instruction-section\">\n                            <ResourceEventList\n                             events={this.state.resource_events}\n                             clickHandler={this.goToEventNumber}\n                             eventCounter={this.state.resource_event_counter}/>\n                          </div>\n\n                          <Divider />\n                          <Grid container xs={12} spacing={12}>\n                            <Grid xs={6}>\n                              <Button\n                               variant=\"outlined\"\n                               className=\"instruction-nav-button\"\n                               disabled={this.state.resource_event_counter === -1 ? true : false}\n                               onClick={this.prevEvent}>\n                                Previous\n                              </Button>\n                            </Grid>\n\n                            <Grid xs={6}>\n                              <Button\n                               variant=\"outlined\"\n                               className=\"instruction-nav-button\"\n                               disabled={this.state.resource_event_counter === this.state.resource_events.length - 1 ? true : false}\n                               onClick={this.nextEvent}>\n                                {this.state.resource_event_counter === -1 ? \"Start\" : \"Next\"}\n                              </Button>\n                            </Grid>\n                          </Grid>\n                        </div>\n                      </Paper>\n                    </Grid>\n\n                    <Grid item xs={9} xm={9} xl={9}>\n                      <Paper>\n                        <canvas id=\"graph-space\" />\n                        <GraphSpace resources={this.state.resources} processes={this.state.processes} />\n                      </Paper>\n                    </Grid>\n                  </Grid>\n\n                  <Grid className=\"debug-panel\" container spacing={12}>\n                    <Grid item xs={3}>\n                      <Paper>\n                        <div>\n                          <h2>{this.checkForDeadlock() ? \"Deadlock found.\" : \"No deadlock.\"}</h2>\n                        </div>\n                        <div>\n                          <h2>Processes</h2>\n                          <ProcessList processes={processList} />\n                        </div>\n                        <div>\n                          <h2>Resources</h2>\n                          <ResourceList resources={resourceList} />\n                        </div>\n                      </Paper>\n                    </Grid>\n\n                    <Grid item xs={9}>\n                      <Paper>\n                        <ResourceManagementTable resources={resourceList} processes={processList} processOnClick={this.handleRequestClick}/>\n                      </Paper>\n                    </Grid>\n                  </Grid>\n                </Grid>\n        );\n    }\n\n    nextEvent = (event) => {\n        // Prevent the default browser behavior\n        event.preventDefault();\n\n        // Get the current event counter\n        const count = this.state.resource_event_counter;\n\n        // Bound the value of count to less than or equal to length - 1\n        if(count >= this.state.resource_events.length - 1) {\n            return false;\n        }\n\n        // If this resource event has already been processed, reload from history\n        if(this.state.resource_history.length > count + 1) {\n            this.goToEventNumber(count + 1);\n\n            // Increment the count\n            this.setState(state => ({\n                \"resource_event_counter\": count + 1,\n            }));\n            return;\n        }\n\n        const resourceEvent = this.state.resource_events[count+1];\n\n        if(resourceEvent.operation === \"requests\") {\n            this.requestResource(resourceEvent.process_id, resourceEvent.resource_id);\n        }\n        else if(resourceEvent.operation === \"releases\") {\n            this.releaseResource(resourceEvent.process_id, resourceEvent.resource_id);\n        }\n        else {\n            console.log(\"ERROR: Unknown resource operation found.\");\n            return false;\n        }\n\n        // Save current state\n        if(this.state.resource_history.length >= count) {\n            this.saveResourceManagerState();\n        }\n\n        // Store new count\n        this.setState(state => ({\n            \"resource_event_counter\": count + 1,\n        }));\n    }\n\n    prevEvent = () => {\n        // Get the current event counter\n        const count = this.state.resource_event_counter;\n\n        // Bound the value of count to greater than or equal to zero\n        if(count < 0) {\n            return;\n        }\n\n        // If going to blank state, clear resources\n        if(count === 0) {\n            // TODO: THIS COULD/SHOULD BE IMPLEMENTED BETTER\n            const resources = _.cloneDeep(this.state.resources)\n            let resourceUpdate = [];\n\n            for(let resource of resources) {\n                resource.owner = null;\n                resource.waiting = [];\n\n                resourceUpdate.push(resource);\n            }\n\n            // Decrement count\n            this.setState(state => ({\n                \"resources\": resourceUpdate,\n            }));\n        }\n\n        // Normal operation\n        else {\n            this.goToEventNumber(count - 1);\n        }\n\n        // Decrement count\n        this.setState(state => ({\n            \"resource_event_counter\": count - 1,\n        }));\n    }\n\n    goToEventNumber = (event_number) => {\n        // Prompt developer of reload\n        console.log(\"Reloading from event number \" + event_number);\n\n        // Load state and update event counter\n        this.setState(state => ({\n            \"processes\": this.state.resource_history[event_number].processes,\n            \"resources\": this.state.resource_history[event_number].resources,\n            \"resource_event_counter\": event_number,\n        }));\n    }\n\n    saveResourceManagerState = () => {\n        const count = this.state.resource_event_counter;\n        console.log(\"Saving state for event number \" + count);\n\n        let event_history = _.cloneDeep(this.state.resource_history);\n\n        const processes = _.cloneDeep(this.state.processes);\n        const resources = _.cloneDeep(this.state.resources);\n\n        const event = {\n            \"processes\": processes,\n            \"resources\": resources,\n        }\n\n        // TODO: THIS SHOULD BE INSERTED AT APPROPRIATE PLACE ENSURE\n        // CHANGED HISTORY GETS SAVED\n        // event_history.push(event);\n        event_history[count] = _.cloneDeep(event);\n\n        // Save event history\n        this.setState(state => ({\n            \"resource_history\": event_history,\n        }));\n    }\n\n    fileChangeHandler = (event) => {\n        // Prevent the default browser behavior\n        event.preventDefault();\n\n        const files  = event.target.files;\n        const file   = files[0];\n        let reader   = new FileReader();\n\n        // After file has been read, execute this\n        reader.onload = (event) => {\n            console.log(event.target.result);\n\n            // Get retrieved text\n            const text = event.target.result;\n\n            // Split the retrieved text into lines\n            const lines = text.split(\"\\n\");\n\n            for(let line of lines) {\n                // Check which type of command it is\n                if(line.includes(\"processes\")) {\n                    // Get the matching number of processes group\n                    const numProcesses = line.match(/(\\d+) processes/)[1];\n                    console.log(\"Found \" + numProcesses + \" processes.\");\n\n                    let processArray = [];\n\n                    for(let x = 0; x < numProcesses; x++) {\n                        processArray.push(\n                            {\n                                id: x,\n                                name: \"p\" + x,\n                            }\n                        );\n                    }\n\n                    this.setState(state => ({\n                        \"processes\": processArray,\n                    }));\n                }\n                else if(line.includes(\"resources\")) {\n                    // Get matching number of resources group\n                    const numResources = line.match(/(\\d+) resources/)[1];\n                    console.log(\"Found \" + numResources + \" resources.\");\n\n                    // Create the appropriate resources\n                    let resourceArray = [];\n\n                    for(let x = 0; x < numResources; x++) {\n                        resourceArray.push(\n                            {\n                                id: x,\n                                name: \"r\" + x,\n                                owner: null,\n                                waiting: [],\n                            }\n                        );\n                    }\n\n                    this.setState(state => ({\n                        \"resources\": resourceArray,\n                    }));\n                }\n                else if(line.includes(\"requests\")) {\n                    const regexResult = line.match(/p(\\d+) requests r(\\d+)/);\n                    const regexProcess = parseInt(regexResult[1]);\n                    const regexResource = parseInt(regexResult[2]);\n\n                    console.log(\"Found resource request line: p\" + regexProcess + \" => r\" + regexResource);\n\n                    const event_list = _.cloneDeep(this.state.resource_events);\n                    const resourceEvent = {\n                        \"process_id\": regexProcess,\n                        \"resource_id\": regexResource,\n                        \"operation\": \"requests\",\n                    };\n\n                    event_list.push(resourceEvent);\n\n                    this.setState(state => ({\n                        \"resource_events\": event_list,\n                    }));\n                }\n                else if(line.includes(\"releases\")) {\n                    const regexResult = line.match(/p(\\d+) releases r(\\d+)/);\n                    const regexProcess = parseInt(regexResult[1]);\n                    const regexResource = parseInt(regexResult[2]);\n\n                    console.log(\"Found resource release line: p\" + regexProcess + \" => r\" + regexResource);\n\n                    const event_list = _.cloneDeep(this.state.resource_events);\n                    const resourceEvent = {\n                        \"process_id\": regexProcess,\n                        \"resource_id\": regexResource,\n                        \"operation\": \"releases\",\n                    };\n\n                    event_list.push(resourceEvent);\n\n                    this.setState(state => ({\n                        \"resource_events\": event_list,\n                    }));\n                }\n                else {\n                    console.log(\"ERROR: Found line which doesn't match standard.\");\n                }\n            }\n        }\n\n        // Begin reading file as a text file\n        const content = reader.readAsText(file);\n    }\n\n    getNextProcessId = (processes) => {\n        if(processes.length === 0) {\n            return 0;\n        }\n\n        let process_id_retval = 0;\n\n        for(let process of processes) {\n            if(process.id >= process_id_retval) {\n                process_id_retval = process.id + 1;\n            }\n        }\n\n        return process_id_retval;\n    }\n\n    addProcess = (process_id, process_name) => {\n        const processes = _.cloneDeep(this.state.processes);\n\n        // If process_id not specified, set one\n        if(process_id === null) {\n            process_id = this.getNextProcessId(processes);\n        }\n\n        // If process_name not specified, set one\n        if(process_name === null) {\n            process_name = \"unspecified\";\n        }\n\n        const process = {\"id\": process_id, \"name\": process_name};\n\n        processes.push(process);\n\n        // Update state of resources\n        this.setState(state => ({\n            resources: processes,\n        }));\n    }\n\n    removeProcess = (process_id) => {\n        // If process_id not specified, set one\n        if(process_id === null) {\n            return false;\n        }\n\n        // Remove the process from the processes\n        const processes = _.cloneDeep(this.state.processes);\n        const process = {\"id\": process_id};\n        _.remove(processes, process);\n\n        // Update state of resources\n        this.setState(state => ({\n            processes: processes,\n        }));\n    }\n\n    /*\n     * Determine if deadlock is present in current system.\n     */\n    checkForDeadlock = () => {\n        const resources = this.state.resources;\n\n        let owners = {};\n        let waiting = {};\n\n        let cycle_detected = false;\n\n        // Iterate through available resources\n        for(let resource of resources) {\n            // If the resource doesn't have an owner continue\n            if(resource.owner === null) {\n                continue;\n            }\n\n            // Run cycle detection algorithm\n            if(this.cycleDetector(resource.id, [], \"p\" + resource.owner)) {\n                return true;\n            }\n        }\n\n        return cycle_detected;\n    }\n\n    cycleDetector = (resource_id, observed_list, end_node) => {\n        console.log(\"Cycle Detecting: \" + resource_id);\n        console.log(\"Cycle array: \" + observed_list);\n\n        if(observed_list > 10) {\n            return false;\n        }\n\n        // if(observed_list.includes(\"r\" + resource_id)) {\n        if(observed_list.includes(end_node)) {\n            return true;\n        }\n\n        const resources = this.state.resources;\n        const resource  = resources[resource_id];\n\n        let cycle_detected = false;\n\n        // Iterate through the waiting processes\n        for(let process_id of resource.waiting) {\n\n            // Find the resources which the current process posesses\n            for(let resource_i of resources) {\n                if(resource_i.owner === process_id) {\n                    let observed = observed_list;\n                    observed.push(\"p\" + process_id);\n                    observed.push(\"r\" + resource_i.id);\n\n                    if(observed > 10) {\n                        return true;\n                    }\n\n                    console.log(\"Calling Cycle Detector\");\n                    if(this.cycleDetector(resource_i.id, observed, end_node)) {\n                        return true;\n                    };\n                }\n            }\n        }\n\n        return cycle_detected;\n    }\n\n    /*\n     * Get a resource object using it's resource identifier.\n     *\n     * Returns the resource matching the resource identifier if present\n     * or returns null on failure.\n     */\n    getResourceById = (resources, resource_id) => {\n        for(let resource of resources) {\n            if(resource.id === resource_id) {\n                return resource;\n            }\n        }\n\n        return null;\n    }\n\n    /*\n     * Click handler for requesting and releasing resources.\n     *\n     * Determines if the click should be a request or release and calls the appropriate function.\n     */\n    handleRequestClick = (process_id, resource_id, event_handle) => {\n        const resources = this.state.resources;\n        const resource = this.getResourceById(resources, resource_id);\n\n        if(resource === null || resource === -1) {\n            console.log(\"ERROR: Resource [\" + resource_id + \"] requested by process [\" + process_id + \"], but not present.\");\n            return false;\n        }\n\n        // If currently following resource, release it\n        if(resource.waiting.includes(process_id) || resource.owner === process_id) {\n            this.releaseResource(process_id, resource_id);\n        }\n        else {\n            this.requestResource(process_id, resource_id);\n        }\n    }\n\n    /*\n     * Requests a resource from a process.\n     *\n     * Requests a resource specified by resource_id from the process specified by\n     * process_id and returns true upon success or false upon duplicate request or\n     * upon being put on the waiting queue.\n     */\n    requestResource = (process_id, resource_id) => {\n        const resources = _.cloneDeep(this.state.resources);\n        const resource = this.getResourceById(resources, resource_id);\n        const resource_index = _.findIndex(this.state.resources, resource);\n\n        if(resource === null || resource_index === -1) {\n            console.log(\"ERROR: Resource [\" + resource_id + \"] requested, but not present.\");\n            return false;\n        }\n\n        const owner = resource.owner;\n        const waiting = resource.waiting;\n\n        console.log(\"Process \" + process_id + \" is requesting Resource \" + resource_id);\n\n        if(owner === null) {\n            // Change local version of resources\n            resources[resource_index].owner = process_id;\n\n            console.log(\"Resource is free!\");\n\n            // Update state of resources\n            this.setState(state => ({\n                resources: resources,\n            }));\n\n            // Return true indicating successful acquisition\n            return true;\n        }\n        else if(owner === process_id) {\n            console.log(\"Process \" + process_id + \" requesting resource it already owns! (\" + resource_id + \")\");\n        }\n        else {\n            // If the waiting list doesn't contain the process id\n            if(!waiting.includes(process_id)) {\n                // Change local version of resources\n                resources[resource_index].waiting.push(process_id);\n\n                console.log(\"Process joining the wait queue...\");\n\n                // Add the process id to the waiting list\n                this.setState(state => ({\n                    resources: resources,\n                }));\n\n                return false;\n            }\n\n            console.log(\"ERROR: Process duplicate resource request.\");\n\n            // Return false indicating failure to acquire\n            return false;\n        }\n    }\n\n    /*\n     * Releases a resource for a process.\n     *\n     * Releases the resource specified by resource_id from the process specified by\n     * process_id and returns true upon success or false upon releasing a resource\n     * the process doesn't own.\n     */\n    releaseResource = (process_id, resource_id) => {\n        const resources = _.cloneDeep(this.state.resources);\n        const resource = this.getResourceById(resources, resource_id);\n        const resource_index = _.findIndex(this.state.resources, resource);\n\n        if(resource === null || resource_index === -1) {\n            console.log(\"ERROR: Resource [\" + resource_id + \"] requested, but not present.\");\n            return false;\n        }\n\n        const owner = resource.owner;\n        const waiting = resource.waiting;\n\n        // If the correct process_id was supplied\n        if(owner === process_id) {\n\n            // Shift off first element in waiting array and store int nextOwner\n            // Note: mutates the waiting array\n            const nextOwner = waiting.shift();\n\n            // Check if no-one was one array(used as queue)\n            if(nextOwner === undefined) {\n                resources[resource_index].owner = null;\n            } else {\n                resources[resource_index].owner = nextOwner;\n            }\n\n            // Change local version of resources\n            resources[resource_index].waiting = waiting;\n\n            // Update state of resources\n            this.setState(state => ({\n                resources: resources,\n            }));\n\n            // Return true indicating successful acquisition\n            return true;\n        }\n\n        else {\n            // TODO: This is an error if this occurs!\n            // YOU SHOULD NEVER RELEASE A RESOURCE YOU DON'T OWN\n            // SOMETHING HAS CAUSE THE PROGRAM TO FALL OUT OF SYNC\n            console.log(\"ERROR: Process(\" + process_id + \") tried to release a resource(\" + resource.id + \") without ownership.\");\n            return false;\n        }\n    }\n}\n\nexport default ResourceManager;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {ResourceManager} from './ResourceManager';\n\nReactDOM.render(<ResourceManager />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}