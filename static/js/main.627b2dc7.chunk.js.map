{"version":3,"sources":["serviceWorker.js","Resource.js","ResourceEvent.js","ProcessResource.js","helper.js","Graphing.js","ResourceManagementTable.js","ResourceEventFile.js","ResourceManager.js","index.js"],"names":["Boolean","window","location","hostname","match","Resource","props","react_default","a","createElement","name","ResourceList","resourceListItems","resources","map","resource","key","id","_","require","ResourceEventList","resourceEventArray","events","length","List","className","_step","_iterator","_createForOfIteratorHelper","_loop","event","value","eventIndex","findIndex","currentEvent","eventCounter","push","ListItem","button","onClick","e","clickHandler","selected","process_id","operation","resource_id","s","n","done","err","f","Process","ProcessCell","relationship","res","proc","owner","waiting","includes","getRelationshipText","process","color","toLowerCase","Button","variant","ProcessList","processListItems","processes","blocked","GraphSpace","_React$Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clear","canvas","document","getElementById","getContext","clearRect","width","height","state","count","canvas_height","canvas_width","title","title_row","title_col","text_padding_top","process_height","process_width","process_row","resource_height","resource_width","resource_row","inherits","createClass","ctx","numProcesses","numResources","font","fillStyle","textAlign","strokeStyle","fillText","processWidth","parseInt","x","startCol","textCol","textRow","rect","stroke","resourceWidth","startProcessCol","startResourceCol","beginPath","moveTo","lineTo","Graphing_createForOfIteratorHelper","i","React","Component","ResourceManagementTable","processOnClick","tableHeaderRow","TableCell","tableBody","rowData","ResourceManagementTable_createForOfIteratorHelper","TableRow","Table","TableHead","TableBody","ResourceEventFile","handleSubmit","fileChangeHandler","bind","assertThisInitialized","fileInput","createRef","onChange","type","ref","DisplayDeadlock","deadlocked","join","ResourceManager","nextEvent","preventDefault","resource_event_counter","resource_events","resource_history","goToEventNumber","setState","resourceEvent","requestResource","console","log","releaseResource","saveResourceManagerState","prevEvent","cloneDeep","resourceUpdate","ResourceManager_createForOfIteratorHelper","event_number","event_history","file","target","files","reader","FileReader","onload","result","_step2","_iterator2","split","line","processArray","resourceArray","regexResult","regexProcess","regexResource","event_list","readAsText","getNextProcessId","_step3","process_id_retval","_iterator3","addProcess","process_name","removeProcess","remove","checkForDeadlock","_step4","_iterator4","cycleDetector","observed_list","end_node","deadlock","_step5","_iterator5","_step6","_iterator6","resource_i","observed","getResourceById","_step7","_iterator7","handleRequestClick","event_handle","resource_index","nextOwner","shift","undefined","getProcessState","_step8","_iterator8","_step9","resourceList","processList","_iterator9","_step10","_iterator10","Grid","container","direction","spacing","item","xs","xm","xl","Paper","ResourceEventFile_ResourceEventFile","Divider","disabled","Graphing_GraphSpace","ReactDOM","render","ResourceManager_ResourceManager","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uICfC,SAASC,EAASC,GACrB,OAAOC,EAAAC,EAAAC,cAAA,uBAAeH,EAAMI,MAGzB,SAASC,EAAaL,GACzB,IAEMM,EAFYN,EAAMO,UAEYC,IAAI,SAACC,GAAD,OACAR,EAAAC,EAAAC,cAAA,MAAIO,IAAKD,EAAST,MAAMW,IAAKF,KAErE,OACQR,EAAAC,EAAAC,cAAA,UAAKG,GAIFP,wiCCXf,IAAIa,EAAIC,EAAQ,IAMT,SAASC,EAAkBd,GAC9B,IAAIe,EAAqB,GAEzB,GAA2B,IAAxBf,EAAMgB,OAAOC,OACZ,OACIhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMC,UAAU,qBALa,IAAAC,EAAAC,EAAAC,EAUpBtB,EAAMgB,QAVc,QAAAO,EAAA,eAU7BC,EAV6BJ,EAAAK,MAW3BC,EAAad,EAAEe,UAAU3B,EAAMgB,OAAQQ,GACzCI,EAAgBF,IAAe1B,EAAM6B,aAEzCd,EAAmBe,KACX7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAUC,QAAM,EACfb,UAAW,aACXc,QAAS,SAACC,GAAD,OAAOlC,EAAMmC,aAAaT,IACnCU,SAAUR,GACRF,EAJH,KAIiBF,EAAMa,WAJvB,IAIoCb,EAAMc,UAJ1C,IAIsDd,EAAMe,eATxE,IAAAlB,EAAAmB,MAAApB,EAAAC,EAAAoB,KAAAC,MAA+BnB,IAVM,MAAAoB,GAAAtB,EAAAa,EAAAS,GAAA,QAAAtB,EAAAuB,IAuBrC,OACQ3C,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMC,UAAU,oBACbJ,GC5BR,SAAS8B,EAAQ7C,GACpB,OAAOC,EAAAC,EAAAC,cAAA,sBAAcH,EAAMI,MAGxB,SAAS0C,EAAY9C,GAExB,IAAM+C,ECdH,SAA6BC,EAAKC,GACrC,IAAMC,EAAQF,EAAIhD,MAAMkD,MAClBC,EAAUH,EAAIhD,MAAMmD,QAE1B,OAAGF,EAAKjD,MAAMW,KAAOuC,EACV,QAGHC,EAAQC,SAASH,EAAKjD,MAAMW,IACzB,UAIA,UDCU0C,CAAoBrD,EAAMS,SAAUT,EAAMsD,SAE3DC,EAAQ,UAUZ,MARkC,UAA/BR,EAAaS,cACZD,EAAQ,UAG2B,YAA/BR,EAAaS,gBACjBD,EAAQ,aAIRtD,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAQC,QAAQ,WAAWH,MAAOA,EAAOpC,UAAU,0BAA0Bc,QAAS,SAACC,GAAD,OAAOlC,EAAMiC,QAAQjC,EAAMsD,QAAQtD,MAAMW,GAAIX,EAAMS,SAAST,MAAMW,GAAIuB,KACzJa,IAMR,SAASY,EAAY3D,GACxB,IAEM4D,EAFY5D,EAAM6D,UAEWrD,IAAI,SAAC8C,GAAD,OACArD,EAAAC,EAAAC,cAAA,MAAIO,IAAK4C,EAAQtD,MAAMW,IAAK2C,EAA5B,MAAwCA,EAAQtD,MAAM8D,QAAU,UAAY,aAEnH,OACQ7D,EAAAC,EAAAC,cAAA,UAAKyD,uhCE1CV,IAAMG,EAAb,SAAAC,GAEI,SAAAD,EAAY/D,GAAO,IAAAiE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMpE,KAwIVwE,MAAQ,WAEJ,IAAMC,EAASC,SAASC,eAAe,eAIvC,GAAc,OAAXF,EAIC,OAAO,EAHDA,EAAOG,WAAW,MAMxBC,UAAU,EAAG,EAAGJ,EAAOK,MAAOL,EAAOM,SApJzCd,EAAKe,MAAQ,CACTC,MAAO,GAIXhB,EAAKiB,cAAgB,IACrBjB,EAAKkB,aAAe,IAGpBlB,EAAKmB,MAAQ,4BACbnB,EAAKoB,UAAY,GACjBpB,EAAKqB,UAAYrB,EAAKkB,aAAe,EAGrClB,EAAKsB,iBAAmB,EAGxBtB,EAAKuB,eAAkB,GACvBvB,EAAKwB,cAAkB,GACvBxB,EAAKyB,YAAkB,IAGvBzB,EAAK0B,gBAAkB,GACvB1B,EAAK2B,eAAkB,GACvB3B,EAAK4B,aAAkB,IA1BR5B,EAFvB,OAAAC,OAAA4B,EAAA,EAAA5B,CAAAH,EAAAC,GAAAE,OAAA6B,EAAA,EAAA7B,CAAAH,EAAA,EAAArD,IAAA,SAAAe,MAAA,WAiCQ,IAAMgD,EAASC,SAASC,eAAe,eAEnCqB,EAAM,KAGV,GAAc,OAAXvB,EAMC,OAAOxE,EAAAC,EAAAC,cAAA,YALP6F,EAAMvB,EAAOG,WAAW,MAa5BH,EAAOK,MAAQV,KAAKe,aACpBV,EAAOM,OAASX,KAAKc,cAGrBd,KAAKI,QAGL,IAAMyB,EAAe7B,KAAKpE,MAAM6D,UAAU5C,OACpCiF,EAAe9B,KAAKpE,MAAMO,UAAUU,OAG1C+E,EAAIG,KAAO,gBACXH,EAAII,UAAY,QAChBJ,EAAIK,UAAU,SACdL,EAAIM,YAAY,QAEhBN,EAAIO,SAASnC,KAAKgB,MAAOhB,KAAKkB,UAAWlB,KAAKiB,WAE9CW,EAAIG,KAAO,gBAKX,IAFA,IAAMK,EAAeC,SAAShC,EAAOK,MAAQmB,GAErCS,EAAE,EAAGA,EAAET,EAAcS,IAAK,CAC9B,IAAMC,EAAWD,EAAIF,EAAgB,IAAOA,EAAepC,KAAKqB,eAC1DmB,EAAWF,EAAIF,EAAgB,GAAMA,EACrCK,EAAWzC,KAAKsB,YAAe,GAAMtB,KAAKoB,eAAkBpB,KAAKmB,iBAGvES,EAAIc,KAAKH,EAAUvC,KAAKsB,YAAatB,KAAKqB,cAAerB,KAAKoB,gBAC9DQ,EAAIe,SAEJf,EAAIO,SAAS,IAAIG,EAAGE,EAASC,GAMjC,IAFA,IAAMG,EAAgBP,SAAShC,EAAOK,MAAQoB,GAEtCQ,EAAE,EAAGA,EAAER,EAAcQ,IAAK,CAC9B,IAAMC,EAAWD,EAAIM,EAAiB,IAAOA,EAAgB5C,KAAKwB,gBAC5DgB,EAAWF,EAAIM,EAAiB,GAAMA,EACtCH,EAAWzC,KAAKyB,aAAgB,GAAMzB,KAAKuB,gBAAmBvB,KAAKmB,iBAGzES,EAAIc,KAAKH,EAAUvC,KAAKyB,aAAczB,KAAKwB,eAAgBxB,KAAKuB,iBAChEK,EAAIe,SAEJf,EAAIO,SAAS,IAAIG,EAAGE,EAASC,GAOjC,IAHA,IAAMI,EAAmB,GAAMT,EACzBU,EAAmB,GAAMF,EAEvBN,EAAE,EAAGA,EAAER,EAAcQ,IAAK,CAE9B,IAAMxD,EAAQkB,KAAKpE,MAAMO,UAAUmG,GAAGxD,MAChCC,EAAUiB,KAAKpE,MAAMO,UAAUmG,GAAGvD,QAExC,GAAa,OAAVD,IAKH8C,EAAImB,YACJnB,EAAIM,YAAY,QAChBN,EAAIoB,OAAOlE,EAAQsD,EAAeS,EAAiB7C,KAAKsB,aACxDM,EAAIqB,OAAOX,EAAIM,EAAgBE,EAAkB9C,KAAKyB,aAAezB,KAAKuB,iBAC1EK,EAAIe,SAGD5D,EAAQlC,OAAS,GAAG,KAAAG,EAAAC,EAAAiG,EAENnE,GAFM,IAEnB,IAAA9B,EAAAmB,MAAApB,EAAAC,EAAAoB,KAAAC,MAAsB,KAAd6E,EAAcnG,EAAAK,MAClBuE,EAAImB,YACJnB,EAAIM,YAAY,MAChBN,EAAIoB,OAAOG,EAAIf,EAAeS,EAAiB7C,KAAKsB,aACpDM,EAAIqB,OAAOX,EAAIM,EAAgBE,EAAkB9C,KAAKyB,aAAezB,KAAKuB,iBAC1EK,EAAIe,UAPW,MAAApE,GAAAtB,EAAAa,EAAAS,GAAA,QAAAtB,EAAAuB,MAa3B,OAAO3C,EAAAC,EAAAC,cAAA,gBAxIf4D,EAAA,CAAgCyD,IAAMC,ukCCW/B,SAASC,EAAwB1H,GACpC,IAAM6D,EAAY7D,EAAM6D,UAClBtD,EAAYP,EAAMO,UAClBoH,EAAiB3H,EAAM2H,eAGvBC,EAAiBrH,EAAUC,IAAI,SAACC,GAAD,OACAR,EAAAC,EAAAC,cAAC0H,EAAA,EAAD,CAAWnH,IAAKD,EAAST,MAAMW,IAAIV,EAAAC,EAAAC,cAACJ,EAAD,CAAUY,GAAIF,EAAST,MAAMW,GAAIP,KAAMK,EAAST,MAAMI,UAIxH0H,EAAYjE,EAAUrD,IAAI,SAAC8C,GAEG,IAAIyE,EAAU,GAEdA,EAAQjG,KAAK7B,EAAAC,EAAAC,cAAC0H,EAAA,EAAD,KAAW5H,EAAAC,EAAAC,cAAC0C,EAAD,CAASlC,GAAI2C,EAAQtD,MAAMW,GAAIP,KAAMkD,EAAQtD,MAAMI,SAH/E,IAAAgB,EAAAC,EAAA2G,EAKwBzH,GALxB,IAKI,IAAAc,EAAAmB,MAAApB,EAAAC,EAAAoB,KAAAC,MAA+B,KAAvBjC,EAAuBW,EAAAK,MAC3BsG,EAAQjG,KAAK7B,EAAAC,EAAAC,cAAC2C,EAAD,CAAaQ,QAASA,EAAS7C,SAAUA,EAAUwB,QAAS0F,MANjF,MAAAhF,GAAAtB,EAAAa,EAAAS,GAAA,QAAAtB,EAAAuB,IASI,OAAO3C,EAAAC,EAAAC,cAAC8H,EAAA,EAAD,CAAUvH,IAAK4C,EAAQtD,MAAMW,IAAKoH,KAG7E,OACQ9H,EAAAC,EAAAC,cAAC+H,EAAA,EAAD,KACEjI,EAAAC,EAAAC,cAACgI,EAAA,EAAD,KACElI,EAAAC,EAAAC,cAAC8H,EAAA,EAAD,KAAUhI,EAAAC,EAAAC,cAAC0H,EAAA,EAAD,MAAwBD,IAEpC3H,EAAAC,EAAAC,cAACiI,EAAA,EAAD,KACGN,IAMFJ,YC/CFW,EAAb,SAAArE,GACI,SAAAqE,EAAYrI,GAAO,IAAAiE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiE,IACfpE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmE,GAAA9D,KAAAH,KAAMpE,KAEDsI,aAAetI,EAAMuI,kBAAkBC,KAAxBtE,OAAAuE,EAAA,EAAAvE,QAAAuE,EAAA,EAAAvE,CAAAD,KACpBA,EAAKyE,UAAYlB,IAAMmB,YAJR1E,EADvB,OAAAC,OAAA4B,EAAA,EAAA5B,CAAAmE,EAAArE,GAAAE,OAAA6B,EAAA,EAAA7B,CAAAmE,EAAA,EAAA3H,IAAA,SAAAe,MAAA,WASQ,OACQxB,EAAAC,EAAAC,cAAA,QAAMyI,SAAUxE,KAAKkE,cACnBrI,EAAAC,EAAAC,cAAA,SAAO0I,KAAK,OAAOC,IAAK1E,KAAKsE,iBAX/CL,EAAA,CAAuCb,IAAMC,qiCCyB7C,IAAI7G,EAAIC,EAAQ,IAEhB,SAASkI,EAAgB/I,GACrB,OACQC,EAAAC,EAAAC,cAAA,SAAIH,EAAMgJ,WAAWC,KAAK,MAI/B,IAAMC,EAAb,SAAAlF,GACI,SAAAkF,EAAYlJ,GAAO,IAAAiE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8E,IACfjF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgF,GAAA3E,KAAAH,KAAMpE,KAyGVmJ,UAAY,SAAC3H,GAETA,EAAM4H,iBAGN,IAAMnE,EAAQhB,EAAKe,MAAMqE,uBAGzB,GAAGpE,GAAShB,EAAKe,MAAMsE,gBAAgBrI,OAAS,EAC5C,OAAO,EAIX,GAAGgD,EAAKe,MAAMuE,iBAAiBtI,OAASgE,EAAQ,EAO5C,OANAhB,EAAKuF,gBAAgBvE,EAAQ,QAG7BhB,EAAKwF,SAAS,SAAAzE,GAAK,MAAK,CACpBqE,uBAA0BpE,EAAQ,KAK1C,IAAMyE,EAAgBzF,EAAKe,MAAMsE,gBAAgBrE,EAAM,GAEvD,GAA+B,aAA5ByE,EAAcpH,UACb2B,EAAK0F,gBAAgBD,EAAcrH,WAAYqH,EAAcnH,iBAE5D,IAA+B,aAA5BmH,EAAcpH,UAKlB,OADAsH,QAAQC,IAAI,6CACL,EAJP5F,EAAK6F,gBAAgBJ,EAAcrH,WAAYqH,EAAcnH,aAQ9D0B,EAAKe,MAAMuE,iBAAiBtI,QAAUgE,GACrChB,EAAK8F,2BAIT9F,EAAKwF,SAAS,SAAAzE,GAAK,MAAK,CACpBqE,uBAA0BpE,EAAQ,MArJvBhB,EAyJnB+F,UAAY,WAER,IAAM/E,EAAQhB,EAAKe,MAAMqE,uBAGzB,KAAGpE,EAAQ,GAAX,CAKA,GAAa,IAAVA,EAAa,CAEZ,IAFY7D,EAENb,EAAYK,EAAEqJ,UAAUhG,EAAKe,MAAMzE,WACrC2J,EAAiB,GAHT7I,EAAA8I,EAKQ5J,GALR,IAKZ,IAAAc,EAAAmB,MAAApB,EAAAC,EAAAoB,KAAAC,MAA+B,KAAvBjC,EAAuBW,EAAAK,MAC3BhB,EAASyC,MAAQ,KACjBzC,EAAS0C,QAAU,GAEnB+G,EAAepI,KAAKrB,IATZ,MAAAkC,GAAAtB,EAAAa,EAAAS,GAAA,QAAAtB,EAAAuB,IAaZqB,EAAKwF,SAAS,SAAAzE,GAAK,MAAK,CACpBzE,UAAa2J,UAMjBjG,EAAKuF,gBAAgBvE,EAAQ,GAIjChB,EAAKwF,SAAS,SAAAzE,GAAK,MAAK,CACpBqE,uBAA0BpE,EAAQ,OA5LvBhB,EAgMnBuF,gBAAkB,SAACY,GAEfR,QAAQC,IAAI,+BAAiCO,GAG7CnG,EAAKwF,SAAS,SAAAzE,GAAK,MAAK,CACpBnB,UAAaI,EAAKe,MAAMuE,iBAAiBa,GAAcvG,UACvDtD,UAAa0D,EAAKe,MAAMuE,iBAAiBa,GAAc7J,UACvD8I,uBAA0Be,MAxMfnG,EA4MnB8F,yBAA2B,WACvB,IAAM9E,EAAQhB,EAAKe,MAAMqE,uBACzBO,QAAQC,IAAI,iCAAmC5E,GAE/C,IAAIoF,EAAgBzJ,EAAEqJ,UAAUhG,EAAKe,MAAMuE,kBAKrC/H,EAAQ,CACVqC,UAJcjD,EAAEqJ,UAAUhG,EAAKe,MAAMnB,WAKrCtD,UAJcK,EAAEqJ,UAAUhG,EAAKe,MAAMzE,YAUzC8J,EAAcpF,GAASrE,EAAEqJ,UAAUzI,GAGnCyC,EAAKwF,SAAS,SAAAzE,GAAK,MAAK,CACpBuE,iBAAoBc,MAjOTpG,EAqOnBsE,kBAAoB,SAAC/G,GAEjBA,EAAM4H,iBAEN,IACMkB,EADS9I,EAAM+I,OAAOC,MACP,GACjBC,EAAW,IAAIC,WAGnBD,EAAOE,OAAS,SAACnJ,GACboI,QAAQC,IAAIrI,EAAM+I,OAAOK,QAGzB,IAJuBC,EAAAC,EAAAX,EAIV3I,EAAM+I,OAAOK,OAGPG,MAAM,OAPF,IASvB,IAAAD,EAAAtI,MAAAqI,EAAAC,EAAArI,KAAAC,MAAuB,KAAfsI,EAAeH,EAAApJ,MAEhBuJ,EAAK5H,SAAS,aAAc,WAE3B,IAAM6C,EAAe+E,EAAKlL,MAAM,mBAAmB,GACnD8J,QAAQC,IAAI,SAAW5D,EAAe,eAItC,IAFA,IAAIgF,EAAe,GAEXvE,EAAI,EAAGA,EAAIT,EAAcS,IAC7BuE,EAAanJ,KACT,CACInB,GAAI+F,EACJtG,KAAM,IAAMsG,IAKxBzC,EAAKwF,SAAS,SAAAzE,GAAK,MAAK,CACpBnB,UAAaoH,KAjBU,GAoBvBD,EAAK5H,SAAS,aAAc,WAEhC,IAAM8C,EAAe8E,EAAKlL,MAAM,mBAAmB,GACnD8J,QAAQC,IAAI,SAAW3D,EAAe,eAKtC,IAFA,IAAIgF,EAAgB,GAEZxE,EAAI,EAAGA,EAAIR,EAAcQ,IAC7BwE,EAAcpJ,KACV,CACInB,GAAI+F,EACJtG,KAAM,IAAMsG,EACZxD,MAAO,KACPC,QAAS,KAKrBc,EAAKwF,SAAS,SAAAzE,GAAK,MAAK,CACpBzE,UAAa2K,KApBe,GAuB5BF,EAAK5H,SAAS,YAAa,WAC/B,IAAM+H,EAAcH,EAAKlL,MAAM,0BACzBsL,EAAe3E,SAAS0E,EAAY,IACpCE,EAAgB5E,SAAS0E,EAAY,IAE3CvB,QAAQC,IAAI,iCAAmCuB,EAAe,QAAUC,GAExE,IAAMC,EAAa1K,EAAEqJ,UAAUhG,EAAKe,MAAMsE,iBACpCI,EAAgB,CAClBrH,WAAc+I,EACd7I,YAAe8I,EACf/I,UAAa,YAGjBgJ,EAAWxJ,KAAK4H,GAEhBzF,EAAKwF,SAAS,SAAAzE,GAAK,MAAK,CACpBsE,gBAAmBgC,KAjBQ,GAoB3BN,EAAK5H,SAAS,YAAa,WAC/B,IAAM+H,EAAcH,EAAKlL,MAAM,0BACzBsL,EAAe3E,SAAS0E,EAAY,IACpCE,EAAgB5E,SAAS0E,EAAY,IAE3CvB,QAAQC,IAAI,iCAAmCuB,EAAe,QAAUC,GAExE,IAAMC,EAAa1K,EAAEqJ,UAAUhG,EAAKe,MAAMsE,iBACpCI,EAAgB,CAClBrH,WAAc+I,EACd7I,YAAe8I,EACf/I,UAAa,YAGjBgJ,EAAWxJ,KAAK4H,GAEhBzF,EAAKwF,SAAS,SAAAzE,GAAK,MAAK,CACpBsE,gBAAmBgC,KAjBQ,GAqB/B1B,QAAQC,IAAI,oDA/FG,MAAAlH,GAAAmI,EAAA5I,EAAAS,GAAA,QAAAmI,EAAAlI,MAqGX6H,EAAOc,WAAWjB,IAnVnBrG,EAsVnBuH,iBAAmB,SAAC3H,GAChB,GAAwB,IAArBA,EAAU5C,OACT,OAAO,EAGX,IAL8BwK,EAK1BC,EAAoB,EALMC,EAAAxB,EAOXtG,GAPW,IAO9B,IAAA8H,EAAAnJ,MAAAiJ,EAAAE,EAAAlJ,KAAAC,MAA8B,KAAtBY,EAAsBmI,EAAAhK,MACvB6B,EAAQ3C,IAAM+K,IACbA,EAAoBpI,EAAQ3C,GAAK,IATX,MAAAgC,GAAAgJ,EAAAzJ,EAAAS,GAAA,QAAAgJ,EAAA/I,IAa9B,OAAO8I,GAnWQzH,EAsWnB2H,WAAa,SAACvJ,EAAYwJ,GACtB,IAAMhI,EAAYjD,EAAEqJ,UAAUhG,EAAKe,MAAMnB,WAGvB,OAAfxB,IACCA,EAAa4B,EAAKuH,iBAAiB3H,IAInB,OAAjBgI,IACCA,EAAe,eAGnB,IAAMvI,EAAU,CAAC3C,GAAM0B,EAAYjC,KAAQyL,GAE3ChI,EAAU/B,KAAKwB,GAGfW,EAAKwF,SAAS,SAAAzE,GAAK,MAAK,CACpBzE,UAAWsD,MAzXAI,EA6XnB6H,cAAgB,SAACzJ,GAEb,GAAkB,OAAfA,EACC,OAAO,EAIX,IAAMwB,EAAYjD,EAAEqJ,UAAUhG,EAAKe,MAAMnB,WACnCP,EAAU,CAAC3C,GAAM0B,GACvBzB,EAAEmL,OAAOlI,EAAWP,GAGpBW,EAAKwF,SAAS,SAAAzE,GAAK,MAAK,CACpBnB,UAAWA,MA1YAI,EAiZnB+H,iBAAmB,WACf,IADqBC,EAAAC,EAAA/B,EACHlG,EAAKe,MAAMzE,WADR,IASrB,IAAA2L,EAAA1J,MAAAyJ,EAAAC,EAAAzJ,KAAAC,MAA+B,KAAvBjC,EAAuBwL,EAAAxK,MAE3B,GAAsB,OAAnBhB,EAASyC,OAKTe,EAAKkI,cAAc1L,EAASE,GAAI,GAAI,IAAMF,EAASyC,OAClD,OAAO,GAjBM,MAAAP,GAAAuJ,EAAAhK,EAAAS,GAAA,QAAAuJ,EAAAtJ,IAqBrB,OAfqB,GAvZNqB,EAyanBkI,cAAgB,SAAC5J,EAAa6J,EAAeC,GAIzC,GAHAzC,QAAQC,IAAI,oBAAsBtH,GAClCqH,QAAQC,IAAI,gBAAkBuC,GAE3BA,EAAchJ,SAASiJ,GAMtB,OALAzC,QAAQC,IAAI,sBAAwBuC,GAGpCnI,EAAKqI,SAAWF,GAET,EAGX,IAbsDG,EAahDhM,EAAY0D,EAAKe,MAAMzE,UAbyBiM,EAAArC,EAcpC5J,EAAUgC,GAKGY,SAnBuB,IAmBtD,IAAAqJ,EAAAhK,MAAA+J,EAAAC,EAAA/J,KAAAC,MAAwC,KAAA+J,EAAhCpK,EAAgCkK,EAAA9K,MAAAiL,EAAAvC,EAGd5J,GAHc,IAGpC,IAAAmM,EAAAlK,MAAAiK,EAAAC,EAAAjK,KAAAC,MAAiC,KAAzBiK,EAAyBF,EAAAhL,MAC7B,GAAGkL,EAAWzJ,QAAUb,EAAY,CAChC,IAAIuK,EAAWR,EAKf,GAJAQ,EAAS9K,KAAK,IAAMO,GACpBuK,EAAS9K,KAAK,IAAM6K,EAAWhM,IAE/BiJ,QAAQC,IAAI,0BACT5F,EAAKkI,cAAcQ,EAAWhM,GAAIiM,EAAUP,GAC3C,OAAO,IAXiB,MAAA1J,GAAA+J,EAAAxK,EAAAS,GAAA,QAAA+J,EAAA9J,MAnBc,MAAAD,GAAA6J,EAAAtK,EAAAS,GAAA,QAAA6J,EAAA5J,IAoCtD,OApBqB,GAzbNqB,EAsdnB4I,gBAAkB,SAACtM,EAAWgC,GAAgB,IAAAuK,EAAAC,EAAA5C,EACtB5J,GADsB,IAC1C,IAAAwM,EAAAvK,MAAAsK,EAAAC,EAAAtK,KAAAC,MAA+B,KAAvBjC,EAAuBqM,EAAArL,MAC3B,GAAGhB,EAASE,KAAO4B,EACf,OAAO9B,GAH2B,MAAAkC,GAAAoK,EAAA7K,EAAAS,GAAA,QAAAoK,EAAAnK,IAO1C,OAAO,MA7dQqB,EAqenB+I,mBAAqB,SAAC3K,EAAYE,EAAa0K,GAC3C,IAAM1M,EAAY0D,EAAKe,MAAMzE,UACvBE,EAAWwD,EAAK4I,gBAAgBtM,EAAWgC,GAEjD,GAAgB,OAAb9B,IAAmC,IAAdA,EAEpB,OADAmJ,QAAQC,IAAI,oBAAsBtH,EAAc,2BAA6BF,EAAa,wBACnF,EAIR5B,EAAS0C,QAAQC,SAASf,IAAe5B,EAASyC,QAAUb,EAC3D4B,EAAK6F,gBAAgBzH,EAAYE,GAGjC0B,EAAK0F,gBAAgBtH,EAAYE,IAnftB0B,EA8fnB0F,gBAAkB,SAACtH,EAAYE,GAC3B,IAAMhC,EAAYK,EAAEqJ,UAAUhG,EAAKe,MAAMzE,WACnCE,EAAWwD,EAAK4I,gBAAgBtM,EAAWgC,GAC3C2K,EAAiBtM,EAAEe,UAAUsC,EAAKe,MAAMzE,UAAWE,GAEzD,GAAgB,OAAbA,IAAyC,IAApByM,EAEpB,OADAtD,QAAQC,IAAI,oBAAsBtH,EAAc,kCACzC,EAGX,IAAMW,EAAQzC,EAASyC,MACjBC,EAAU1C,EAAS0C,QAIzB,OAFAyG,QAAQC,IAAI,WAAaxH,EAAa,2BAA6BE,GAEtD,OAAVW,GAEC3C,EAAU2M,GAAgBhK,MAAQb,EAElCuH,QAAQC,IAAI,qBAGZ5F,EAAKwF,SAAS,SAAAzE,GAAK,MAAK,CACpBzE,UAAWA,MAIR,GAEH2C,IAAUb,EAKVc,EAAQC,SAASf,IAcrBuH,QAAQC,IAAI,+CAGL,IAfHtJ,EAAU2M,GAAgB/J,QAAQrB,KAAKO,GAEvCuH,QAAQC,IAAI,qCAGZ5F,EAAKwF,SAAS,SAAAzE,GAAK,MAAK,CACpBzE,UAAWA,MAGR,QAfXqJ,QAAQC,IAAI,WAAaxH,EAAa,0CAA4CE,EAAc,MA5hBrF0B,EA4jBnB6F,gBAAkB,SAACzH,EAAYE,GAC3B,IAAMhC,EAAYK,EAAEqJ,UAAUhG,EAAKe,MAAMzE,WACnCE,EAAWwD,EAAK4I,gBAAgBtM,EAAWgC,GAC3C2K,EAAiBtM,EAAEe,UAAUsC,EAAKe,MAAMzE,UAAWE,GAEzD,GAAgB,OAAbA,IAAyC,IAApByM,EAEpB,OADAtD,QAAQC,IAAI,oBAAsBtH,EAAc,kCACzC,EAGX,IAAMW,EAAQzC,EAASyC,MACjBC,EAAU1C,EAAS0C,QAGzB,GAAGD,IAAUb,EAAY,CAIrB,IAAM8K,EAAYhK,EAAQiK,QAkB1B,OAdI7M,EAAU2M,GAAgBhK,WADbmK,IAAdF,EACmC,KAEAA,EAItC5M,EAAU2M,GAAgB/J,QAAUA,EAGpCc,EAAKwF,SAAS,SAAAzE,GAAK,MAAK,CACpBzE,UAAWA,MAIR,EAQP,OADAqJ,QAAQC,IAAI,kBAAoBxH,EAAa,iCAAmC5B,EAASE,GAAK,yBACvF,GAxmBIsD,EA4mBnBqJ,gBAAkB,SAACjL,GACf,IAD8BkL,EAAAC,EAAArD,EACZlG,EAAKe,MAAMzE,WADC,IAG9B,IAAAiN,EAAAhL,MAAA+K,EAAAC,EAAA/K,KAAAC,MAA+B,CAC3B,GAD2B6K,EAAA9L,MACf0B,QAAQC,SAASf,GACzB,OAAO,GALe,MAAAM,GAAA6K,EAAAtL,EAAAS,GAAA,QAAA6K,EAAA5K,IAS9B,OAAO,GAnnBPqB,EAAKe,MAAQ,CACTnB,UAAW,GACXtD,UAAW,GACX+I,gBAAiB,GACjBC,iBAAkB,GAClBF,wBAAyB,GAG7BpF,EAAKqI,SAAW,GAVDrI,EADvB,OAAAC,OAAA4B,EAAA,EAAA5B,CAAAgF,EAAAlF,GAAAE,OAAA6B,EAAA,EAAA7B,CAAAgF,EAAA,EAAAxI,IAAA,SAAAe,MAAA,WAeQ,IADKgM,EACDC,EAAe,GACfC,EAAc,GAFbC,EAAAzD,EAKe/F,KAAKY,MAAMzE,WAL1B,IAKL,IAAAqN,EAAApL,MAAAiL,EAAAG,EAAAnL,KAAAC,MAA0C,KAAlCjC,EAAkCgN,EAAAhM,MACtCiM,EAAa5L,KAAK7B,EAAAC,EAAAC,cAACJ,EAAD,CAAUY,GAAIF,EAASE,GAAIP,KAAMK,EAASL,KAAM8C,MAAOzC,EAASyC,MAAOC,QAAS1C,EAAS0C,YAN1G,MAAAR,GAAAiL,EAAA1L,EAAAS,GAAA,QAAAiL,EAAAhL,IAAA,IAAAiL,EAAAC,EAAA3D,EAUc/F,KAAKY,MAAMnB,WAVzB,IAUL,IAAAiK,EAAAtL,MAAAqL,EAAAC,EAAArL,KAAAC,MAAyC,KAAjCY,EAAiCuK,EAAApM,MACrCkM,EAAY7L,KAAK7B,EAAAC,EAAAC,cAAC0C,EAAD,CAASlC,GAAI2C,EAAQ3C,GAAIP,KAAMkD,EAAQlD,KAAM0D,QAASM,KAAKkJ,gBAAgBhK,EAAQ3C,IAAKuC,MAAOI,EAAQJ,MAAOC,QAASG,EAAQH,QAAShB,aAAciC,KAAKuF,oBAX3K,MAAAhH,GAAAmL,EAAA5L,EAAAS,GAAA,QAAAmL,EAAAlL,IAcL,OACQ3C,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAM5M,UAAU,eAAe6M,WAAS,EAACC,UAAU,SAASC,QAAS,IACnEjO,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAM5M,UAAU,aAAa6M,WAAS,EAACE,QAAS,IAC9CjO,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAC3BrO,EAAAC,EAAAC,cAACoO,EAAA,EAAD,KACEtO,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,qBACblB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,4BACblB,EAAAC,EAAAC,cAACqO,EAAD,CAAmBjG,kBAAmBnE,KAAKmE,qBAE7CtI,EAAAC,EAAAC,cAACsO,EAAA,EAAD,MACAxO,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,uBACblB,EAAAC,EAAAC,cAACW,EAAD,CACCE,OAAQoD,KAAKY,MAAMsE,gBACnBnH,aAAciC,KAAKoF,gBACnB3H,aAAcuC,KAAKY,MAAMqE,0BAG5BpJ,EAAAC,EAAAC,cAACsO,EAAA,EAAD,MACAxO,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAMC,WAAS,EAACI,GAAI,GAAIF,QAAS,IAC/BjO,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAMK,GAAI,GACRnO,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CACCC,QAAQ,WACRvC,UAAU,yBACVuN,UAAiD,IAAvCtK,KAAKY,MAAMqE,uBACrBpH,QAASmC,KAAK4F,WAJf,aASF/J,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAMK,GAAI,GACRnO,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CACCC,QAAQ,WACRvC,UAAU,yBACVuN,SAAUtK,KAAKY,MAAMqE,yBAA2BjF,KAAKY,MAAMsE,gBAAgBrI,OAAS,EACpFgB,QAASmC,KAAK+E,YAC2B,IAAvC/E,KAAKY,MAAMqE,uBAAgC,QAAU,aAQlEpJ,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAC3BrO,EAAAC,EAAAC,cAACoO,EAAA,EAAD,KACEtO,EAAAC,EAAAC,cAAA,UAAQQ,GAAG,gBACXV,EAAAC,EAAAC,cAACwO,EAAD,CAAYpO,UAAW6D,KAAKY,MAAMzE,UAAWsD,UAAWO,KAAKY,MAAMnB,eAKzE5D,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAM5M,UAAU,cAAc6M,WAAS,EAACE,QAAS,IAC/CjO,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACbnO,EAAAC,EAAAC,cAACoO,EAAA,EAAD,KACEtO,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKiE,KAAK4H,mBAAqB,kBAAoB,gBACnD/L,EAAAC,EAAAC,cAAC4I,EAAD,CAAiBC,WAAY5E,KAAKkI,YAEpCrM,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACwD,EAAD,CAAaE,UAAW8J,KAE1B1N,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACE,EAAD,CAAcE,UAAWmN,OAK/BzN,EAAAC,EAAAC,cAAC4N,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACbnO,EAAAC,EAAAC,cAACoO,EAAA,EAAD,KACEtO,EAAAC,EAAAC,cAACuH,EAAD,CAAyBnH,UAAWmN,EAAc7J,UAAW8J,EAAahG,eAAgBvD,KAAK4I,6BAnGvH9D,EAAA,CAAqC1B,IAAMC,WC7B3CmH,IAASC,OAAO5O,EAAAC,EAAAC,cAAC2O,EAAD,MAAqBpK,SAASC,eAAe,ST2HvD,kBAAmBoK,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.627b2dc7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './index.css';\r\n\r\nexport function Resource(props) {\r\n    return <div>Resource {props.name}</div>;\r\n}\r\n\r\nexport function ResourceList(props) {\r\n    const resources = props.resources;\r\n\r\n    const resourceListItems = resources.map((resource) =>\r\n                                            <li key={resource.props.id}>{resource}</li>\r\n                                           );\r\n    return (\r\n            <ul>{resourceListItems}</ul>\r\n    );\r\n}\r\n\r\nexport default Resource;\r\n","import React from 'react';\r\n\r\n// Material theming\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\n\r\n// Include lodash library\r\nvar _ = require('lodash');\r\n\r\nexport function ResourceEvent(props) {\r\n    return <p>{props.process_id} {props.operation} {props.resource_id}</p>\r\n}\r\n\r\nexport function ResourceEventList(props) {\r\n    let resourceEventArray = [];\r\n\r\n    if(props.events.length === 0) {\r\n        return (\r\n            <List className=\"instruction-list\">\r\n            </List>\r\n        );\r\n    }\r\n\r\n    for(let event of props.events) {\r\n        const eventIndex = _.findIndex(props.events, event);\r\n        let currentEvent = (eventIndex === props.eventCounter);\r\n\r\n        resourceEventArray.push(\r\n                <ListItem button\r\n                 className={\"event-item\"}\r\n                 onClick={(e) => props.clickHandler(eventIndex)}\r\n                 selected={currentEvent}>\r\n                  {eventIndex}) {event.process_id} {event.operation} {event.resource_id}\r\n               </ListItem>);\r\n    }\r\n\r\n    return (\r\n            <List className=\"instruction-list\">\r\n              {resourceEventArray}\r\n            </List>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default ResourceEvent;\r\n","import React from 'react';\r\nimport './index.css';\r\n\r\n// Material component\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n// My helper functions\r\nimport {getRelationshipText} from './helper.js';\r\n\r\nexport function Process(props) {\r\n    return <div>Process {props.name}</div>;\r\n}\r\n\r\nexport function ProcessCell(props) {\r\n\r\n    const relationship = getRelationshipText(props.resource, props.process);\r\n\r\n    let color = \"default\";\r\n\r\n    if(relationship.toLowerCase() === \"owner\") {\r\n        color = \"primary\";\r\n    }\r\n\r\n    else if(relationship.toLowerCase() === \"waiting\") {\r\n        color = \"secondary\";\r\n    }\r\n\r\n    return (\r\n        <td>\r\n            <Button variant=\"outlined\" color={color} className=\"resource-acquire-button\" onClick={(e) => props.onClick(props.process.props.id, props.resource.props.id, e)}>\r\n              {relationship}\r\n            </Button>\r\n        </td>\r\n    );\r\n}\r\n\r\nexport function ProcessList(props) {\r\n    const processes = props.processes;\r\n\r\n    const processListItems = processes.map((process) =>\r\n                                           <li key={process.props.id}>{process} - {process.props.blocked ? \"Blocked\" : \"Running\"}</li>\r\n                                          );\r\n    return (\r\n            <ul>{processListItems}</ul>\r\n    );\r\n}\r\n\r\nexport default Process;\r\n\r\n","import React from 'react';\r\n\r\nexport function getRelationshipText(res, proc) {\r\n    const owner = res.props.owner;\r\n    const waiting = res.props.waiting;\r\n\r\n    if(proc.props.id === owner) {\r\n        return \"Owner\";\r\n    }\r\n\r\n    else if(waiting.includes(proc.props.id)) {\r\n        return \"Waiting\";\r\n    }\r\n\r\n    else {\r\n        return \"Request\";\r\n    }\r\n}\r\n\r\nexport function textToJsxList(text) {\r\n        const textArray = text.split(\"\\n\");\r\n\r\n        let jsxArray = [];\r\n\r\n        for(let line of textArray) {\r\n            jsxArray.push(<li>{line}</li>);\r\n        }\r\n\r\n        return (\r\n                <ul>\r\n                  {jsxArray}\r\n                </ul>\r\n        );\r\n    }\r\n\r\n","import React from 'react';\r\n\r\nexport class GraphSpace extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            count: 1,\r\n        };\r\n\r\n        // Canvas dimensions\r\n        this.canvas_height = 405;\r\n        this.canvas_width = 800;\r\n\r\n        // Title dimensions\r\n        this.title = \"Resource Management Graph\";\r\n        this.title_row = 40;\r\n        this.title_col = this.canvas_width / 2;\r\n\r\n        // All text\r\n        this.text_padding_top = 8;\r\n\r\n        // Process dimensions\r\n        this.process_height  = 30; // px\r\n        this.process_width   = 50; // px\r\n        this.process_row     = 300; // px\r\n\r\n        // Resource dimensions\r\n        this.resource_height = 30; // px\r\n        this.resource_width  = 50; // px\r\n        this.resource_row    = 100; // px\r\n    }\r\n\r\n    render() {\r\n        // Get canvas by id\r\n        const canvas = document.getElementById(\"graph-space\");\r\n\r\n        let ctx = null;\r\n\r\n        // If canvas is found, retrieve the context\r\n        if(canvas !== null) {\r\n            ctx = canvas.getContext(\"2d\");\r\n        }\r\n\r\n        // If canvas is not found, just return immediately\r\n        else {\r\n            return <div></div>;\r\n        }\r\n\r\n        // Set the height of the canvas\r\n        // NOTE: THESE TWO LINES ARE IMPORTANT!!!\r\n        // Without these two lines, double drawing (or failure to clear?)\r\n        // of lines occasionally occurs which does not get redrawn for the\r\n        // remainder of the lifetime of the application...\r\n        canvas.width = this.canvas_width;\r\n        canvas.height = this.canvas_height;\r\n\r\n        // Clear the screen\r\n        this.clear();\r\n\r\n        // Draw updated screen\r\n        const numProcesses = this.props.processes.length;\r\n        const numResources = this.props.resources.length;\r\n\r\n        // Print Title\r\n        ctx.font = \"30px Consolas\";\r\n        ctx.fillStyle = \"black\";\r\n        ctx.textAlign=\"center\";\r\n        ctx.strokeStyle=\"black\";\r\n\r\n        ctx.fillText(this.title, this.title_col, this.title_row);\r\n\r\n        ctx.font = \"16px Consolas\";\r\n\r\n        // Draw the processes\r\n        const processWidth = parseInt(canvas.width / numProcesses);\r\n\r\n        for(let x=0; x<numProcesses; x++) {\r\n            const startCol = x * processWidth + (0.5 * (processWidth - this.process_width));\r\n            const textCol  = x * processWidth + (0.5 * processWidth);\r\n            const textRow  = this.process_row + (0.5 * this.process_height) + this.text_padding_top;\r\n\r\n            // Draw process rectangle\r\n            ctx.rect(startCol, this.process_row, this.process_width, this.process_height);\r\n            ctx.stroke();\r\n\r\n            ctx.fillText(\"p\"+x, textCol, textRow);\r\n        }\r\n\r\n        // Draw the resources\r\n        const resourceWidth = parseInt(canvas.width / numResources);\r\n\r\n        for(let x=0; x<numResources; x++) {\r\n            const startCol = x * resourceWidth + (0.5 * (resourceWidth - this.resource_width));\r\n            const textCol  = x * resourceWidth + (0.5 * resourceWidth);\r\n            const textRow  = this.resource_row + (0.5 * this.resource_height) + this.text_padding_top;\r\n\r\n            // Draw resource rectangle\r\n            ctx.rect(startCol, this.resource_row, this.resource_width, this.resource_height);\r\n            ctx.stroke();\r\n\r\n            ctx.fillText(\"r\"+x, textCol, textRow);\r\n        }\r\n\r\n        // Draw the resource requests and waiting relationships\r\n        const startProcessCol  = 0.5 * processWidth;\r\n        const startResourceCol = 0.5 * resourceWidth;\r\n\r\n        for(let x=0; x<numResources; x++) {\r\n\r\n            const owner = this.props.resources[x].owner;\r\n            const waiting = this.props.resources[x].waiting;\r\n\r\n            if(owner === null) {\r\n                continue;\r\n            }\r\n\r\n            // Draw owner relationship\r\n            ctx.beginPath();\r\n            ctx.strokeStyle=\"green\";\r\n            ctx.moveTo(owner * processWidth + startProcessCol, this.process_row);\r\n            ctx.lineTo(x * resourceWidth + startResourceCol, this.resource_row + this.resource_height);\r\n            ctx.stroke(); // Draw it\r\n\r\n            // Draw any waiting processes\r\n            if(waiting.length > 0) {\r\n                // Print waiting lines\r\n                for(let i of waiting) {\r\n                    ctx.beginPath();\r\n                    ctx.strokeStyle=\"red\";\r\n                    ctx.moveTo(i * processWidth + startProcessCol, this.process_row);\r\n                    ctx.lineTo(x * resourceWidth + startResourceCol, this.resource_row + this.resource_height);\r\n                    ctx.stroke(); // Draw it\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        return <div></div>;\r\n    }\r\n\r\n    clear = () => {\r\n        // Get canvas by id\r\n        const canvas = document.getElementById(\"graph-space\");\r\n\r\n        let ctx = null;\r\n\r\n        if(canvas !== null) {\r\n            ctx = canvas.getContext(\"2d\");\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n}\r\n\r\nexport default GraphSpace\r\n","import React from 'react';\r\n\r\n// Material table theming\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\n// My components\r\nimport {Resource} from './Resource';\r\nimport {Process, ProcessCell} from './ProcessResource';\r\n\r\nexport function ResourceManagementTable(props) {\r\n    const processes = props.processes;\r\n    const resources = props.resources;\r\n    const processOnClick = props.processOnClick;\r\n\r\n    // Blank cell for first space in table\r\n    const tableHeaderRow = resources.map((resource) =>\r\n                                         <TableCell key={resource.props.id}><Resource id={resource.props.id} name={resource.props.name} /></TableCell>\r\n                                        );\r\n\r\n    // Fill in the table data for the processes\r\n    const tableBody = processes.map((process) =>\r\n                                    {\r\n                                        let rowData = [];\r\n\r\n                                        rowData.push(<TableCell><Process id={process.props.id} name={process.props.name} /></TableCell>);\r\n\r\n                                        for(let resource of resources) {\r\n                                            rowData.push(<ProcessCell process={process} resource={resource} onClick={processOnClick} />);\r\n                                        }\r\n\r\n                                        return <TableRow key={process.props.id}>{rowData}</TableRow>;\r\n                                    });\r\n\r\n    return (\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow><TableCell></TableCell>{tableHeaderRow}</TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {tableBody}\r\n              </TableBody>\r\n            </Table>\r\n    );\r\n}\r\n\r\nexport default ResourceManagementTable\r\n","import React from 'react';\r\n\r\nexport class ResourceEventFile extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleSubmit = props.fileChangeHandler.bind(this);\r\n        this.fileInput = React.createRef();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <form onChange={this.handleSubmit}>\r\n                  <input type=\"file\" ref={this.fileInput} />\r\n                </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResourceEventFile;\r\n","import React from 'react';\r\n\r\n// Material theming\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n// Material button theming\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n// My components\r\nimport {Resource, ResourceList} from './Resource';\r\nimport {ResourceEvent, ResourceEventList} from './ResourceEvent';\r\nimport {Process, ProcessCell, ProcessList} from './ProcessResource';\r\nimport {GraphSpace} from './Graphing.js';\r\nimport {ResourceManagementTable} from './ResourceManagementTable.js';\r\nimport {ResourceEventFile} from './ResourceEventFile.js';\r\n\r\n// My helper functions\r\nimport {getRelationshipText, textToJsxList} from './helper.js';\r\n\r\n// My theming\r\nimport './MainGui.css';\r\n\r\n// If deep clone is needed...\r\n// https://stackoverflow.com/questions/29537299/react-how-do-i-update-state-item1-on-setstate-with-jsfiddle/46865234#46865234\r\n// import {cloneDeep} from 'lodash';\r\nvar _ = require('lodash');\r\n\r\nfunction DisplayDeadlock(props) {\r\n    return (\r\n            <p>{props.deadlocked.join(\",\")}</p>\r\n    );\r\n}\r\n\r\nexport class ResourceManager extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            processes: [],\r\n            resources: [],\r\n            resource_events: [],\r\n            resource_history: [],\r\n            resource_event_counter: -1,\r\n        };\r\n\r\n        this.deadlock = [];\r\n    }\r\n\r\n    render() {\r\n        let resourceList = [];\r\n        let processList = []\r\n\r\n        // Create resource JSX\r\n        for(let resource of this.state.resources) {\r\n            resourceList.push(<Resource id={resource.id} name={resource.name} owner={resource.owner} waiting={resource.waiting} />);\r\n        }\r\n\r\n        // Create process JSX\r\n        for(let process of this.state.processes) {\r\n            processList.push(<Process id={process.id} name={process.name} blocked={this.getProcessState(process.id)} owner={process.owner} waiting={process.waiting} clickHandler={this.requestResource} />);\r\n        }\r\n\r\n        return (\r\n                <Grid className=\"full-display\" container direction=\"column\" spacing={12}>\r\n                  <Grid className=\"main-panel\" container spacing={12}>\r\n                    <Grid item xs={3} xm={3} xl={3}>\r\n                      <Paper>\r\n                        <div className=\"instruction-panel\">\r\n                          <div className=\"instruction-file-section\">\r\n                            <ResourceEventFile fileChangeHandler={this.fileChangeHandler}/>\r\n                          </div>\r\n                          <Divider />\r\n                          <div className=\"instruction-section\">\r\n                            <ResourceEventList\r\n                             events={this.state.resource_events}\r\n                             clickHandler={this.goToEventNumber}\r\n                             eventCounter={this.state.resource_event_counter}/>\r\n                          </div>\r\n\r\n                          <Divider />\r\n                          <Grid container xs={12} spacing={12}>\r\n                            <Grid xs={6}>\r\n                              <Button\r\n                               variant=\"outlined\"\r\n                               className=\"instruction-nav-button\"\r\n                               disabled={this.state.resource_event_counter === -1 ? true : false}\r\n                               onClick={this.prevEvent}>\r\n                                Previous\r\n                              </Button>\r\n                            </Grid>\r\n\r\n                            <Grid xs={6}>\r\n                              <Button\r\n                               variant=\"outlined\"\r\n                               className=\"instruction-nav-button\"\r\n                               disabled={this.state.resource_event_counter === this.state.resource_events.length - 1 ? true : false}\r\n                               onClick={this.nextEvent}>\r\n                                {this.state.resource_event_counter === -1 ? \"Start\" : \"Next\"}\r\n                              </Button>\r\n                            </Grid>\r\n                          </Grid>\r\n                        </div>\r\n                      </Paper>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={9} xm={9} xl={9}>\r\n                      <Paper>\r\n                        <canvas id=\"graph-space\" />\r\n                        <GraphSpace resources={this.state.resources} processes={this.state.processes} />\r\n                      </Paper>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid className=\"debug-panel\" container spacing={12}>\r\n                    <Grid item xs={3}>\r\n                      <Paper>\r\n                        <div>\r\n                          <h2>{this.checkForDeadlock() ? \"Deadlock found:\" : \"No deadlock.\"}</h2>\r\n                          <DisplayDeadlock deadlocked={this.deadlock} />\r\n                        </div>\r\n                        <div>\r\n                          <h2>Processes</h2>\r\n                          <ProcessList processes={processList} />\r\n                        </div>\r\n                        <div>\r\n                          <h2>Resources</h2>\r\n                          <ResourceList resources={resourceList} />\r\n                        </div>\r\n                      </Paper>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={9}>\r\n                      <Paper>\r\n                        <ResourceManagementTable resources={resourceList} processes={processList} processOnClick={this.handleRequestClick}/>\r\n                      </Paper>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n        );\r\n    }\r\n\r\n    nextEvent = (event) => {\r\n        // Prevent the default browser behavior\r\n        event.preventDefault();\r\n\r\n        // Get the current event counter\r\n        const count = this.state.resource_event_counter;\r\n\r\n        // Bound the value of count to less than or equal to length - 1\r\n        if(count >= this.state.resource_events.length - 1) {\r\n            return false;\r\n        }\r\n\r\n        // If this resource event has already been processed, reload from history\r\n        if(this.state.resource_history.length > count + 1) {\r\n            this.goToEventNumber(count + 1);\r\n\r\n            // Increment the count\r\n            this.setState(state => ({\r\n                \"resource_event_counter\": count + 1,\r\n            }));\r\n            return;\r\n        }\r\n\r\n        const resourceEvent = this.state.resource_events[count+1];\r\n\r\n        if(resourceEvent.operation === \"requests\") {\r\n            this.requestResource(resourceEvent.process_id, resourceEvent.resource_id);\r\n        }\r\n        else if(resourceEvent.operation === \"releases\") {\r\n            this.releaseResource(resourceEvent.process_id, resourceEvent.resource_id);\r\n        }\r\n        else {\r\n            console.log(\"ERROR: Unknown resource operation found.\");\r\n            return false;\r\n        }\r\n\r\n        // Save current state\r\n        if(this.state.resource_history.length >= count) {\r\n            this.saveResourceManagerState();\r\n        }\r\n\r\n        // Store new count\r\n        this.setState(state => ({\r\n            \"resource_event_counter\": count + 1,\r\n        }));\r\n    }\r\n\r\n    prevEvent = () => {\r\n        // Get the current event counter\r\n        const count = this.state.resource_event_counter;\r\n\r\n        // Bound the value of count to greater than or equal to zero\r\n        if(count < 0) {\r\n            return;\r\n        }\r\n\r\n        // If going to blank state, clear resources\r\n        if(count === 0) {\r\n            // TODO: THIS COULD/SHOULD BE IMPLEMENTED BETTER\r\n            const resources = _.cloneDeep(this.state.resources)\r\n            let resourceUpdate = [];\r\n\r\n            for(let resource of resources) {\r\n                resource.owner = null;\r\n                resource.waiting = [];\r\n\r\n                resourceUpdate.push(resource);\r\n            }\r\n\r\n            // Decrement count\r\n            this.setState(state => ({\r\n                \"resources\": resourceUpdate,\r\n            }));\r\n        }\r\n\r\n        // Normal operation\r\n        else {\r\n            this.goToEventNumber(count - 1);\r\n        }\r\n\r\n        // Decrement count\r\n        this.setState(state => ({\r\n            \"resource_event_counter\": count - 1,\r\n        }));\r\n    }\r\n\r\n    goToEventNumber = (event_number) => {\r\n        // Prompt developer of reload\r\n        console.log(\"Reloading from event number \" + event_number);\r\n\r\n        // Load state and update event counter\r\n        this.setState(state => ({\r\n            \"processes\": this.state.resource_history[event_number].processes,\r\n            \"resources\": this.state.resource_history[event_number].resources,\r\n            \"resource_event_counter\": event_number,\r\n        }));\r\n    }\r\n\r\n    saveResourceManagerState = () => {\r\n        const count = this.state.resource_event_counter;\r\n        console.log(\"Saving state for event number \" + count);\r\n\r\n        let event_history = _.cloneDeep(this.state.resource_history);\r\n\r\n        const processes = _.cloneDeep(this.state.processes);\r\n        const resources = _.cloneDeep(this.state.resources);\r\n\r\n        const event = {\r\n            \"processes\": processes,\r\n            \"resources\": resources,\r\n        }\r\n\r\n        // TODO: THIS SHOULD BE INSERTED AT APPROPRIATE PLACE ENSURE\r\n        // CHANGED HISTORY GETS SAVED\r\n        // event_history.push(event);\r\n        event_history[count] = _.cloneDeep(event);\r\n\r\n        // Save event history\r\n        this.setState(state => ({\r\n            \"resource_history\": event_history,\r\n        }));\r\n    }\r\n\r\n    fileChangeHandler = (event) => {\r\n        // Prevent the default browser behavior\r\n        event.preventDefault();\r\n\r\n        const files  = event.target.files;\r\n        const file   = files[0];\r\n        let reader   = new FileReader();\r\n\r\n        // After file has been read, execute this\r\n        reader.onload = (event) => {\r\n            console.log(event.target.result);\r\n\r\n            // Get retrieved text\r\n            const text = event.target.result;\r\n\r\n            // Split the retrieved text into lines\r\n            const lines = text.split(\"\\n\");\r\n\r\n            for(let line of lines) {\r\n                // Check which type of command it is\r\n                if(line.includes(\"processes\")) {\r\n                    // Get the matching number of processes group\r\n                    const numProcesses = line.match(/(\\d+) processes/)[1];\r\n                    console.log(\"Found \" + numProcesses + \" processes.\");\r\n\r\n                    let processArray = [];\r\n\r\n                    for(let x = 0; x < numProcesses; x++) {\r\n                        processArray.push(\r\n                            {\r\n                                id: x,\r\n                                name: \"p\" + x,\r\n                            }\r\n                        );\r\n                    }\r\n\r\n                    this.setState(state => ({\r\n                        \"processes\": processArray,\r\n                    }));\r\n                }\r\n                else if(line.includes(\"resources\")) {\r\n                    // Get matching number of resources group\r\n                    const numResources = line.match(/(\\d+) resources/)[1];\r\n                    console.log(\"Found \" + numResources + \" resources.\");\r\n\r\n                    // Create the appropriate resources\r\n                    let resourceArray = [];\r\n\r\n                    for(let x = 0; x < numResources; x++) {\r\n                        resourceArray.push(\r\n                            {\r\n                                id: x,\r\n                                name: \"r\" + x,\r\n                                owner: null,\r\n                                waiting: [],\r\n                            }\r\n                        );\r\n                    }\r\n\r\n                    this.setState(state => ({\r\n                        \"resources\": resourceArray,\r\n                    }));\r\n                }\r\n                else if(line.includes(\"requests\")) {\r\n                    const regexResult = line.match(/p(\\d+) requests r(\\d+)/);\r\n                    const regexProcess = parseInt(regexResult[1]);\r\n                    const regexResource = parseInt(regexResult[2]);\r\n\r\n                    console.log(\"Found resource request line: p\" + regexProcess + \" => r\" + regexResource);\r\n\r\n                    const event_list = _.cloneDeep(this.state.resource_events);\r\n                    const resourceEvent = {\r\n                        \"process_id\": regexProcess,\r\n                        \"resource_id\": regexResource,\r\n                        \"operation\": \"requests\",\r\n                    };\r\n\r\n                    event_list.push(resourceEvent);\r\n\r\n                    this.setState(state => ({\r\n                        \"resource_events\": event_list,\r\n                    }));\r\n                }\r\n                else if(line.includes(\"releases\")) {\r\n                    const regexResult = line.match(/p(\\d+) releases r(\\d+)/);\r\n                    const regexProcess = parseInt(regexResult[1]);\r\n                    const regexResource = parseInt(regexResult[2]);\r\n\r\n                    console.log(\"Found resource release line: p\" + regexProcess + \" => r\" + regexResource);\r\n\r\n                    const event_list = _.cloneDeep(this.state.resource_events);\r\n                    const resourceEvent = {\r\n                        \"process_id\": regexProcess,\r\n                        \"resource_id\": regexResource,\r\n                        \"operation\": \"releases\",\r\n                    };\r\n\r\n                    event_list.push(resourceEvent);\r\n\r\n                    this.setState(state => ({\r\n                        \"resource_events\": event_list,\r\n                    }));\r\n                }\r\n                else {\r\n                    console.log(\"ERROR: Found line which doesn't match standard.\");\r\n                }\r\n            }\r\n        }\r\n\r\n        // Begin reading file as a text file\r\n        const content = reader.readAsText(file);\r\n    }\r\n\r\n    getNextProcessId = (processes) => {\r\n        if(processes.length === 0) {\r\n            return 0;\r\n        }\r\n\r\n        let process_id_retval = 0;\r\n\r\n        for(let process of processes) {\r\n            if(process.id >= process_id_retval) {\r\n                process_id_retval = process.id + 1;\r\n            }\r\n        }\r\n\r\n        return process_id_retval;\r\n    }\r\n\r\n    addProcess = (process_id, process_name) => {\r\n        const processes = _.cloneDeep(this.state.processes);\r\n\r\n        // If process_id not specified, set one\r\n        if(process_id === null) {\r\n            process_id = this.getNextProcessId(processes);\r\n        }\r\n\r\n        // If process_name not specified, set one\r\n        if(process_name === null) {\r\n            process_name = \"unspecified\";\r\n        }\r\n\r\n        const process = {\"id\": process_id, \"name\": process_name};\r\n\r\n        processes.push(process);\r\n\r\n        // Update state of resources\r\n        this.setState(state => ({\r\n            resources: processes,\r\n        }));\r\n    }\r\n\r\n    removeProcess = (process_id) => {\r\n        // If process_id not specified, set one\r\n        if(process_id === null) {\r\n            return false;\r\n        }\r\n\r\n        // Remove the process from the processes\r\n        const processes = _.cloneDeep(this.state.processes);\r\n        const process = {\"id\": process_id};\r\n        _.remove(processes, process);\r\n\r\n        // Update state of resources\r\n        this.setState(state => ({\r\n            processes: processes,\r\n        }));\r\n    }\r\n\r\n    /*\r\n     * Determine if deadlock is present in current system.\r\n     */\r\n    checkForDeadlock = () => {\r\n        const resources = this.state.resources;\r\n\r\n        let owners = {};\r\n        let waiting = {};\r\n\r\n        let cycle_detected = false;\r\n\r\n        // Iterate through available resources\r\n        for(let resource of resources) {\r\n            // If the resource doesn't have an owner continue\r\n            if(resource.owner === null) {\r\n                continue;\r\n            }\r\n\r\n            // Run cycle detection algorithm\r\n            if(this.cycleDetector(resource.id, [], \"p\" + resource.owner)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return cycle_detected;\r\n    }\r\n\r\n    cycleDetector = (resource_id, observed_list, end_node) => {\r\n        console.log(\"Cycle Detecting: \" + resource_id);\r\n        console.log(\"Cycle array: \" + observed_list);\r\n\r\n        if(observed_list.includes(end_node)) {\r\n            console.log(\"Deadlock detected: \" + observed_list);\r\n\r\n            // Update deadlock value\r\n            this.deadlock = observed_list;\r\n\r\n            return true;\r\n        }\r\n\r\n        const resources = this.state.resources;\r\n        const resource  = resources[resource_id];\r\n\r\n        let cycle_detected = false;\r\n\r\n        // Iterate through the waiting processes\r\n        for(let process_id of resource.waiting) {\r\n\r\n            // Find the resources which the current process posesses\r\n            for(let resource_i of resources) {\r\n                if(resource_i.owner === process_id) {\r\n                    let observed = observed_list;\r\n                    observed.push(\"p\" + process_id);\r\n                    observed.push(\"r\" + resource_i.id);\r\n\r\n                    console.log(\"Calling Cycle Detector\");\r\n                    if(this.cycleDetector(resource_i.id, observed, end_node)) {\r\n                        return true;\r\n                    };\r\n                }\r\n            }\r\n        }\r\n\r\n        return cycle_detected;\r\n    }\r\n\r\n    /*\r\n     * Get a resource object using it's resource identifier.\r\n     *\r\n     * Returns the resource matching the resource identifier if present\r\n     * or returns null on failure.\r\n     */\r\n    getResourceById = (resources, resource_id) => {\r\n        for(let resource of resources) {\r\n            if(resource.id === resource_id) {\r\n                return resource;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /*\r\n     * Click handler for requesting and releasing resources.\r\n     *\r\n     * Determines if the click should be a request or release and calls the appropriate function.\r\n     */\r\n    handleRequestClick = (process_id, resource_id, event_handle) => {\r\n        const resources = this.state.resources;\r\n        const resource = this.getResourceById(resources, resource_id);\r\n\r\n        if(resource === null || resource === -1) {\r\n            console.log(\"ERROR: Resource [\" + resource_id + \"] requested by process [\" + process_id + \"], but not present.\");\r\n            return false;\r\n        }\r\n\r\n        // If currently following resource, release it\r\n        if(resource.waiting.includes(process_id) || resource.owner === process_id) {\r\n            this.releaseResource(process_id, resource_id);\r\n        }\r\n        else {\r\n            this.requestResource(process_id, resource_id);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Requests a resource from a process.\r\n     *\r\n     * Requests a resource specified by resource_id from the process specified by\r\n     * process_id and returns true upon success or false upon duplicate request or\r\n     * upon being put on the waiting queue.\r\n     */\r\n    requestResource = (process_id, resource_id) => {\r\n        const resources = _.cloneDeep(this.state.resources);\r\n        const resource = this.getResourceById(resources, resource_id);\r\n        const resource_index = _.findIndex(this.state.resources, resource);\r\n\r\n        if(resource === null || resource_index === -1) {\r\n            console.log(\"ERROR: Resource [\" + resource_id + \"] requested, but not present.\");\r\n            return false;\r\n        }\r\n\r\n        const owner = resource.owner;\r\n        const waiting = resource.waiting;\r\n\r\n        console.log(\"Process \" + process_id + \" is requesting Resource \" + resource_id);\r\n\r\n        if(owner === null) {\r\n            // Change local version of resources\r\n            resources[resource_index].owner = process_id;\r\n\r\n            console.log(\"Resource is free!\");\r\n\r\n            // Update state of resources\r\n            this.setState(state => ({\r\n                resources: resources,\r\n            }));\r\n\r\n            // Return true indicating successful acquisition\r\n            return true;\r\n        }\r\n        else if(owner === process_id) {\r\n            console.log(\"Process \" + process_id + \" requesting resource it already owns! (\" + resource_id + \")\");\r\n        }\r\n        else {\r\n            // If the waiting list doesn't contain the process id\r\n            if(!waiting.includes(process_id)) {\r\n                // Change local version of resources\r\n                resources[resource_index].waiting.push(process_id);\r\n\r\n                console.log(\"Process joining the wait queue...\");\r\n\r\n                // Add the process id to the waiting list\r\n                this.setState(state => ({\r\n                    resources: resources,\r\n                }));\r\n\r\n                return false;\r\n            }\r\n\r\n            console.log(\"ERROR: Process duplicate resource request.\");\r\n\r\n            // Return false indicating failure to acquire\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Releases a resource for a process.\r\n     *\r\n     * Releases the resource specified by resource_id from the process specified by\r\n     * process_id and returns true upon success or false upon releasing a resource\r\n     * the process doesn't own.\r\n     */\r\n    releaseResource = (process_id, resource_id) => {\r\n        const resources = _.cloneDeep(this.state.resources);\r\n        const resource = this.getResourceById(resources, resource_id);\r\n        const resource_index = _.findIndex(this.state.resources, resource);\r\n\r\n        if(resource === null || resource_index === -1) {\r\n            console.log(\"ERROR: Resource [\" + resource_id + \"] requested, but not present.\");\r\n            return false;\r\n        }\r\n\r\n        const owner = resource.owner;\r\n        const waiting = resource.waiting;\r\n\r\n        // If the correct process_id was supplied\r\n        if(owner === process_id) {\r\n\r\n            // Shift off first element in waiting array and store int nextOwner\r\n            // Note: mutates the waiting array\r\n            const nextOwner = waiting.shift();\r\n\r\n            // Check if no-one was one array(used as queue)\r\n            if(nextOwner === undefined) {\r\n                resources[resource_index].owner = null;\r\n            } else {\r\n                resources[resource_index].owner = nextOwner;\r\n            }\r\n\r\n            // Change local version of resources\r\n            resources[resource_index].waiting = waiting;\r\n\r\n            // Update state of resources\r\n            this.setState(state => ({\r\n                resources: resources,\r\n            }));\r\n\r\n            // Return true indicating successful acquisition\r\n            return true;\r\n        }\r\n\r\n        else {\r\n            // TODO: This is an error if this occurs!\r\n            // YOU SHOULD NEVER RELEASE A RESOURCE YOU DON'T OWN\r\n            // SOMETHING HAS CAUSE THE PROGRAM TO FALL OUT OF SYNC\r\n            console.log(\"ERROR: Process(\" + process_id + \") tried to release a resource(\" + resource.id + \") without ownership.\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getProcessState = (process_id) => {\r\n        const resources = this.state.resources;\r\n\r\n        for(let resource of resources) {\r\n            if(resource.waiting.includes(process_id)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\nexport default ResourceManager;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {ResourceManager} from './ResourceManager';\r\n\r\nReactDOM.render(<ResourceManager />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}